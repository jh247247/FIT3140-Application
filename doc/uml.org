#+AUTHOR: Jack Hosemans

* UML diagram
Note that android boilerplate code has been omitted for brevity,
instead inherited classes from the android api have been used.

#+begin_src plantuml :file main.png
'skinparam monochrome true
package com.fit3140.halftoneApp {
MainActivity o-- FilterInterfaceAdapter
MainActivity o-- ImageViewer

class MainActivity <extends android.app.Activity>{
extends Android.app.Activity
..
#m_filterInterface
#m_imageDisplay
--
+setFilteredImage()
+setSourceImage()
+setFilteredImage()
+addImageToView()
}

class FilterInterfaceCallback {
+addImageToView()
}

FilterInterfaceCallback  --+ FilterInterfaceAdapter

class FilterInterfaceAdapter {
extends android.support.v4.FragmentPagerAdaper
..
#m_sourceImage
--
+setSourceImage()
}


class ImageViewer {
extends android.support.v4.ViewPager
..
#m_imageList
--
+addImage(image)
#clearAllImages()
}

ImageViewerCallback --+ ImageViewer

class ImageViewerCallback {
+setSourceImage()
}

class BasicHalftone {
#m_gridSize
--
+setGridSize(gridSize)
}


note top of BasicHalftone: Filters should start at least one\n thread to process image
note right of AdvancedHalftone: Example of possible \nimprovement
class Filter {
extends Android.app.Fragment
..
#m_image
--
+{abstract}apply()
+{abstract}setImage()
}
Filter <|-- BasicHalftone
Filter <|-- AdvancedHalftone
FilterInterfaceAdapter o-- Filter

Filter +- FilterCallBack
class FilterCallBack {
+setFilteredImage()
}
}
#+end_src

* Dictionary
  - Fragment: An graphical view independent from any other element.
  - Adapter: A class designed to adapt the interface of one class with
    the interface of another.
  - Thread: a process that runs within the application. Takes messages from
    the current program execution and acts upon it.
  - Callback: A method that passed on to other code to be executed at
    some later time.
  - Extends: A class inherits the methods and data values of another
    class.
  - Implements: A class inherits the methods of an interface.
  - Interface: A class that implements no functionality, but defines a
    signature for it's methods that other classes can use.

#+BEGIN_SRC plantuml :file template.png
package PackageName {
class ClassName {
+Public Method()
#Protected Method()
+{abstract} AbstractMethod()
--
+Public Member
#Protected Member
..
#element : Element
}
ClassName +-- InnerClass : Has a
ClassName <|-- ExtendedClass : Extends
ClassName o-- Element : Has a
}


#+END_SRC


* Descriptions of classes
** MainActivity
This class should be the avenue that the filters get/add images to
the user interface

*** setOriginalImage
This should only be called by the ImageViewer when the
source image changes.

It calls the =setSourceImage= method in the
=FilterInterfaceAdapter= class to change the image filtered when
the user presses apply.

*** addImageToView
This should call the =addImageToView= method in the =ImageViewer=
class in order to allow the user to view the results of the previous filter.

** ImageViewer
This class is to show the image results to the user.

*** getCurrentImage
Sets the current =Bitmap= being viewed by the user by calling the
=setSourceImage= method in the parent =MainActivity= via the callback
class =FilterInterfaceCallback=.


*** setOriginalImage
Clears all current images then sets the new source image to the
=Bitmap= passed in.

** FilterInterfaceAdapter
This allows for swapping between the

   Should implement a =ViewPager= so that the user can swipe between
   the halftoning modes that are implemented. Hopefully there will be
   more than one otherwise this will be wasted.

   Each element in the =ViewPager= should be a fragment that
   implements its own interface to the user.

*** setImage
    Sets the reference image to be passed on to the halftone
    implementation when the user presses "Apply"

** Filter
This is an abstract class that forces any filter to implement an
user interface via the =Fragment= api from android while adding
it's own methods to do filtering on an image.

*** setImage
    Sets the source image that the filtering should be applied to
    the image once the user presses apply.

*** apply
Applies the given filter to the set image.

** BasicHalftone
This is an example of a basic filter, does basic halftoning to a
given image with a given grid size.

Note that this current takes quite a while to apply.

*** Proposal for improvement
    Halftoning usually takes a long time (>10s for large images.)
    A solution should be made for this.

    - multiple threads could be used to work around the slowness of
      the application.
      - This would give the advantage of not slowing down the GUI
      - However, it would be harder to code. Maybe another spike is
        in order for implementation?
    - A hard limit on the grid size would also be sufficient
      - "worse" than the threaded way because the application would
        appear to freeze when being halftoned. This is VERY bad.
      - Worse output due to each dot being bigger than any other way.
      - Not using the full power of the processor (We need all we can
        get)
** AdvancedHalftone
   This is currently just a placeholder in case we extend the
   application to do more than basic halftoning.

   Implementations:
   - Different colors
   - Different angles
   - Adding text
   - Background colors
   - Sepia
   - dithering
